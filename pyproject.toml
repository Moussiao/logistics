[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "logistics"
description = ""
package-mode = false

[tool.poetry.dependencies]
python = "~3.12"
# django
django = "^5.1.5"
django-axes = "^6.5.2"
django-celery-results = "^2.5.1"
django-environ = "^0.11.2"
django-ninja = "^1.3.0"
django-split-settings = "^1.3.1"
django-stubs-ext = "^5.1.2"
django-simple-history = "^3.7.0"
channels = {version = "^4.1.0", extras = ["daphne"]}
# other
attrs = "^23.2.0"
celery = "^5.4.0"
mysqlclient = "^2.2.7"
phonenumbers = "^8.13.53"
pycountry = "^24.6.1"
python-telegram-bot = "^21.10"
redis = "^5.2.1"
pyjwt = "^2.10.1"
transitions = "^0.9.2"

[tool.poetry.group.dev.dependencies]
# django
django-debug-toolbar = "^4.4.6"
# tests
pytest = "^8.3.4"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
pytest-django = "^4.9.0"
pytest-freezegun = "^0.4.2"
pytest-mock = "^3.14.0"
pytest-randomly = "^3.16.0"
pytest-timeout = "^2.3.1"
covdefaults = "^2.3.0"
# tests factory
django-fakery = "^4.1.3"
polyfactory = "^2.18.1"
# types
celery-types = "^0.22.0"
django-stubs = {extras = ["compatible-mypy"], version = "^5.1.2"}
types-python-dateutil = "^2.9.0.20241206"
types-freezegun = "^1.1.10"
# other
black = "^24.10.0"
ipython = "^8.31.0"
pre-commit = "^3.8.0"
ruff = "^0.7.4"
mypy = "^1.14.1"

[tool.django-stubs]
django_settings_module = "backend.core.settings"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "backend.core.settings"
addopts = "--cov=. --cov-report=term-missing:skip-covered --cov-report=html --cov-fail-under=0"
filterwarnings = [
    "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning:pytest_freezegun:17",
    "ignore:Converter 'uuid' is already registered.:django.utils.deprecation.RemovedInDjango60Warning:ninja.signature.utils:96",
    "ignore:Support for class-based `config` is deprecated, use ConfigDict instead.:DeprecationWarning:pydantic._internal._config:295",
]
python_files = "test*.py"
# Timeout for tests, so they can not take longer than this amount of seconds.
# (https://pypi.org/project/pytest-timeout/)
timeout = 10

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.black]
line-length = 100
target-version = ['py312']
extend-exclude = '''
/(
  venv
  | .venv
  | migrations
)
'''

[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".git",
    ".github",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "migrations",
    "settings",
    "venv",
]

[tool.ruff.lint]
# https://beta.ruff.rs/docs/rules/
select = ["ALL"]
fixable = ["I"]
ignore = [
    "ANN401",  # dynamically typed expressions (typing.Any) are disallowed in `{}`
    "ARG001",  # Unused function argument: `kwargs`
    "ARG002",  # unused method argument: `{}`
    "ARG004",  # Unused static method argument: `context`
    "COM812",  # trailing comma missing
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D106",  # missing docstring in public nested class
    "D107",  # missing docstring in `__init__`
    "D200",  # one-line docstring should fit on one line
    "D202",  # no blank lines allowed after function docstring (found {})
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D209",  # multi-line docstring closing quotes should be on a separate line
    "D210",  # no whitespaces allowed surrounding docstring text
    "D212",  # multi-line docstring summary should start at the first line
    "D213",  # multi-line docstring summary should start at the second line
    "D400",  # first line should end with a period
    "D401",  # first line of docstring should be in imperative mood: "{}"
    "D404",  # first word of the docstring should not be "This"
    "D415",  # first line should end with a period, question mark, or exclamation point
    "EM101",  # exception must not use a string literal, assign to variable first
    "EM102",  # expection must not use an f-string literal, assign to variable first
    "INP001",  # file `{}` is part of an implicit namespace package. Add an `__init__.py`
    "RUF001",  # string contains ambiguous `{}` [...]
    "RUF002",  # docstring contains ambiguous `{}` [...]
    "RUF003",  # Comment contains ambiguous `{}` [...]
    "RUF005",  # consider iterable unpacking instead of concatenation"
    "RUF009",  # do not perform function call `{}` in dataclass defaults
    "RUF012",  # mutable class attributes should be annotated with `typing.ClassVar`
    "RUF015",  # prefer next({iterable}) over single element slice
    "RUF100",  # unused `noqa` directive (unknown: `{}`)
    "S101",  # use of `assert` detected
    "S105",  # possible hardcoded password assigned to: "{}"
    "S105",  # possible hardcoded password assigned to: "{}"
    "S106",  # possible hardcoded password assigned to argument: "{}"
    "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...
    "TD003",  # Missing issue link on the line following this TODO
    "TD005",  # Missing issue description after `TODO`
    "TRY003",  # avoid specifying long messages outside the exception class
]

[tool.mypy]
python_version = "3.12"
enable_error_code = [
  "truthy-bool",
  "truthy-iterable",
  "unused-awaitable",
  "ignore-without-code",
  "possibly-undefined",
  "redundant-self",
]
plugins = [
    "pydantic.mypy",
    "mypy_django_plugin.main", 
]

disallow_untyped_calls = true
disallow_untyped_defs = true
explicit_package_bases = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
strict = true

exclude = ".*/migrations/.*"
